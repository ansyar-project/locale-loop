// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  loops    Loop[]
  comments Comment[]
  likes    Like[]
  commentLikes CommentLike[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Loop {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  coverImage  String
  city        String
  tags        String[]
  featured    Boolean  @default(false)
  published   Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  places   Place[]
  comments Comment[]
  likes    Like[]

  @@map("loops")
   @@index([city])
  @@index([featured])
  @@index([published])
}

model Place {
  id          String  @id @default(cuid())
  name        String
  description String
  image       String?
  category    String
  mapUrl      String
  address     String?
  latitude    Float?
  longitude   Float?
  order       Int
  loopId      String

  loop Loop @relation(fields: [loopId], references: [id], onDelete: Cascade)

  @@index([loopId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  loop      Loop     @relation(fields: [loopId], references: [id], onDelete: Cascade)
  loopId    String
  likes     CommentLike[] // Add this relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([loopId])
  @@index([userId])
  @@index([createdAt])
  @@map("comments")
}

// Add new model
model CommentLike {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
  @@index([commentId])
  @@map("comment_likes")
}

// Add Like model to fix missing type error
model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  loop      Loop     @relation(fields: [loopId], references: [id], onDelete: Cascade)
  loopId    String
  createdAt DateTime @default(now())

  @@unique([userId, loopId])
  @@index([loopId])
  @@map("likes")
}

